{"ast":null,"code":"var _jsxFileName = \"D:\\\\prototipo-lec\\\\frontend\\\\src\\\\components\\\\Game1.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom'; // Reemplazado useHistory por useNavigate\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game1Exercise = () => {\n  _s();\n  const {\n    exerciseId\n  } = useParams(); // Captura el codewarsId desde la URL\n  const [exercise, setExercise] = useState(null);\n  const [exerciseDetails, setExerciseDetails] = useState(null);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lines, setLines] = useState([]);\n  const [orderedLines, setOrderedLines] = useState([]);\n  const [gameResult, setGameResult] = useState(null); // Nuevo estado para el resultado del juego\n  const userId = \"67869f7defd086ba28f87d41\"; // ID del usuario (puedes obtenerlo dinámicamente)\n  const navigate = useNavigate(); // Usamos useNavigate para la navegación\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const exerciseRes = await axios.get(`http://localhost:5000/api/exercises/codewars/${exerciseId}`);\n        setExercise(exerciseRes.data);\n        const exerciseDetailsRes = await axios.get(`http://localhost:5000/api/codewars/challenge/${exerciseId}`);\n        setExerciseDetails(exerciseDetailsRes.data);\n        const userRes = await axios.get(`http://localhost:5000/api/users/${userId}`);\n        setUser(userRes.data);\n        setLoading(false);\n      } catch (err) {\n        setError('Error al obtener los datos');\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [exerciseId, userId]);\n  useEffect(() => {\n    if (exercise && exercise.answer && exercise.answer.python) {\n      const codeLines = exercise.answer.python.split('\\n');\n      const shuffledLines = [...codeLines].sort(() => Math.random() - 0.5); // Aleatoriza las líneas\n      setLines(shuffledLines);\n      setOrderedLines(codeLines); // Guardamos las líneas en el orden correcto\n    }\n  }, [exercise]);\n  const handleGameCompletion = async isWin => {\n    try {\n      await axios.put(`http://localhost:5000/api/users/progress-unified`, {\n        userId,\n        exerciseId,\n        experiencePoints: isWin ? 100 : 0,\n        successful: isWin\n      });\n      if (isWin) {\n        setGameResult('win');\n      } else {\n        setGameResult('lose');\n      }\n    } catch (err) {\n      console.error('Error al actualizar el progreso del usuario:', err);\n    }\n  };\n  const handleLineMove = (fromIndex, toIndex) => {\n    const updatedLines = [...lines];\n    const [movedLine] = updatedLines.splice(fromIndex, 1);\n    updatedLines.splice(toIndex, 0, movedLine);\n    setLines(updatedLines);\n  };\n\n  // Verifica si las líneas ordenadas son iguales a las originales\n  const checkAnswer = () => {\n    const userCode = lines.join('\\n');\n    const correctCode = orderedLines.join('\\n');\n    return userCode === correctCode;\n  };\n\n  // Función para volver a la lista de ejercicios\n  const goToExerciseList = () => {\n    navigate('/game/game1'); // Usamos navigate() para redirigir\n  };\n\n  // Función para reiniciar el juego\n  const restartGame = () => {\n    setGameResult(null);\n    setLines([...orderedLines].sort(() => Math.random() - 0.5)); // Reordenar las líneas aleatoriamente\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 21\n  }, this);\n  if (!exerciseDetails) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No details available for this exercise.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exercise-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exercise-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: exerciseDetails.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: exerciseDetails.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exercise-code\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Python Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code-lines\",\n        children: lines.map((line, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"code-line\",\n          draggable: true,\n          onDragStart: e => e.dataTransfer.setData('index', index),\n          onDrop: e => {\n            const fromIndex = parseInt(e.dataTransfer.getData('index'));\n            handleLineMove(fromIndex, index);\n          },\n          onDragOver: e => e.preventDefault(),\n          children: line\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"completion-button\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          if (checkAnswer()) {\n            handleGameCompletion(true); // Llamar a la función con \"true\" para indicar que ganó\n          } else {\n            handleGameCompletion(false); // Llamar a la función con \"false\" para indicar que perdió\n            alert('Please try again! The code is not correct.');\n          }\n        },\n        children: \"Completar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), gameResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-modal\",\n      children: gameResult === 'win' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\xA1Has ganado! \\xBFQu\\xE9 te gustar\\xEDa hacer ahora?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: goToExerciseList,\n          children: \"Volver a la lista de ejercicios\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\xA1Has perdido! \\xBFQu\\xE9 te gustar\\xEDa hacer ahora?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: restartGame,\n          children: \"Repetir\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: goToExerciseList,\n          children: \"Volver a la lista de ejercicios\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(Game1Exercise, \"e4GI9ORJnduFj/sUB0cp43f/PFM=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Game1Exercise;\nexport default Game1Exercise;\nvar _c;\n$RefreshReg$(_c, \"Game1Exercise\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Game1Exercise","_s","exerciseId","exercise","setExercise","exerciseDetails","setExerciseDetails","user","setUser","loading","setLoading","error","setError","lines","setLines","orderedLines","setOrderedLines","gameResult","setGameResult","userId","navigate","fetchData","exerciseRes","get","data","exerciseDetailsRes","userRes","err","answer","python","codeLines","split","shuffledLines","sort","Math","random","handleGameCompletion","isWin","put","experiencePoints","successful","console","handleLineMove","fromIndex","toIndex","updatedLines","movedLine","splice","checkAnswer","userCode","join","correctCode","goToExerciseList","restartGame","children","fileName","_jsxFileName","lineNumber","columnNumber","className","name","description","map","line","index","draggable","onDragStart","e","dataTransfer","setData","onDrop","parseInt","getData","onDragOver","preventDefault","onClick","alert","_c","$RefreshReg$"],"sources":["D:/prototipo-lec/frontend/src/components/Game1.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom'; // Reemplazado useHistory por useNavigate\r\n\r\n\r\nconst Game1Exercise = () => {\r\n  const { exerciseId } = useParams(); // Captura el codewarsId desde la URL\r\n  const [exercise, setExercise] = useState(null);\r\n  const [exerciseDetails, setExerciseDetails] = useState(null);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [lines, setLines] = useState([]);\r\n  const [orderedLines, setOrderedLines] = useState([]);\r\n  const [gameResult, setGameResult] = useState(null);  // Nuevo estado para el resultado del juego\r\n  const userId = \"67869f7defd086ba28f87d41\"; // ID del usuario (puedes obtenerlo dinámicamente)\r\n  const navigate = useNavigate();  // Usamos useNavigate para la navegación\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const exerciseRes = await axios.get(`http://localhost:5000/api/exercises/codewars/${exerciseId}`);\r\n        setExercise(exerciseRes.data);\r\n\r\n        const exerciseDetailsRes = await axios.get(`http://localhost:5000/api/codewars/challenge/${exerciseId}`);\r\n        setExerciseDetails(exerciseDetailsRes.data);\r\n\r\n        const userRes = await axios.get(`http://localhost:5000/api/users/${userId}`);\r\n        setUser(userRes.data);\r\n\r\n        setLoading(false);\r\n      } catch (err) {\r\n        setError('Error al obtener los datos');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [exerciseId, userId]);\r\n\r\n  useEffect(() => {\r\n    if (exercise && exercise.answer && exercise.answer.python) {\r\n      const codeLines = exercise.answer.python.split('\\n');\r\n      const shuffledLines = [...codeLines].sort(() => Math.random() - 0.5); // Aleatoriza las líneas\r\n      setLines(shuffledLines);\r\n      setOrderedLines(codeLines); // Guardamos las líneas en el orden correcto\r\n    }\r\n  }, [exercise]);\r\n\r\n  const handleGameCompletion = async (isWin) => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/users/progress-unified`, {\r\n        userId,\r\n        exerciseId,\r\n        experiencePoints: isWin ? 100 : 0,\r\n        successful: isWin,\r\n      });\r\n        \r\n      if (isWin) {\r\n        setGameResult('win');\r\n      } else {\r\n        setGameResult('lose');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error al actualizar el progreso del usuario:', err);\r\n    }\r\n  };\r\n  \r\n\r\n  const handleLineMove = (fromIndex, toIndex) => {\r\n    const updatedLines = [...lines];\r\n    const [movedLine] = updatedLines.splice(fromIndex, 1);\r\n    updatedLines.splice(toIndex, 0, movedLine);\r\n    setLines(updatedLines);\r\n  };\r\n\r\n  // Verifica si las líneas ordenadas son iguales a las originales\r\n  const checkAnswer = () => {\r\n    const userCode = lines.join('\\n');\r\n    const correctCode = orderedLines.join('\\n');\r\n    return userCode === correctCode;\r\n  };\r\n\r\n  // Función para volver a la lista de ejercicios\r\n  const goToExerciseList = () => {\r\n    navigate('/game/game1');  // Usamos navigate() para redirigir\r\n  };\r\n\r\n  // Función para reiniciar el juego\r\n  const restartGame = () => {\r\n    setGameResult(null);\r\n    setLines([...orderedLines].sort(() => Math.random() - 0.5));  // Reordenar las líneas aleatoriamente\r\n  };\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>{error}</p>;\r\n\r\n  if (!exerciseDetails) {\r\n    return <p>No details available for this exercise.</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"exercise-container\">\r\n      {/* Contenedor del título y la descripción del ejercicio */}\r\n      <div className=\"exercise-info\">\r\n        <h1>{exerciseDetails.name}</h1>\r\n        <p>{exerciseDetails.description}</p>\r\n      </div>\r\n\r\n      {/* Contenedor de las líneas de código */}\r\n      <div className=\"exercise-code\">\r\n        <h2>Python Code</h2>\r\n        <div className=\"code-lines\">\r\n          {lines.map((line, index) => (\r\n            <div\r\n              key={index}\r\n              className=\"code-line\"\r\n              draggable\r\n              onDragStart={(e) => e.dataTransfer.setData('index', index)}\r\n              onDrop={(e) => {\r\n                const fromIndex = parseInt(e.dataTransfer.getData('index'));\r\n                handleLineMove(fromIndex, index);\r\n              }}\r\n              onDragOver={(e) => e.preventDefault()}\r\n            >\r\n              {line}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Botón para completar el ejercicio */}\r\n      <div className=\"completion-button\">\r\n        <button \r\n          onClick={() => {\r\n            if (checkAnswer()) {\r\n              handleGameCompletion(true);  // Llamar a la función con \"true\" para indicar que ganó\r\n            } else {\r\n              handleGameCompletion(false);  // Llamar a la función con \"false\" para indicar que perdió\r\n              alert('Please try again! The code is not correct.');\r\n            }\r\n          }}\r\n        >\r\n          Completar\r\n        </button>\r\n      </div>\r\n\r\n      {/* Mostrar el cuadro de resultado dependiendo de si el usuario ganó o perdió */}\r\n      {gameResult && (\r\n        <div className=\"result-modal\">\r\n          {gameResult === 'win' ? (\r\n            <>\r\n              <p>¡Has ganado! ¿Qué te gustaría hacer ahora?</p>\r\n              <button onClick={goToExerciseList}>Volver a la lista de ejercicios</button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <p>¡Has perdido! ¿Qué te gustaría hacer ahora?</p>\r\n              <button onClick={restartGame}>Repetir</button>\r\n              <button onClick={goToExerciseList}>Volver a la lista de ejercicios</button>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game1Exercise;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}